import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve
import matplotlib.pyplot as plt

# 1. Generate Synthetic Dataset
np.random.seed(42)
n_samples = 400

# Features
age = np.random.randint(18, 60, n_samples)
salary = np.random.randint(15000, 150000, n_samples)

# Target generation with a pattern
# Higher salary and middle age more likely to purchase
prob_purchase = 1 / (1 + np.exp(-(0.05 * (salary - 60000) + 0.1 * (35 - age))))
purchased = (np.random.rand(n_samples) < prob_purchase).astype(int)

# Create DataFrame
df = pd.DataFrame({
    'Age': age,
    'EstimatedSalary': salary,
    'Purchased': purchased
})

# 2. Feature and Target Split
X = df[['Age', 'EstimatedSalary']]
y = df['Purchased']

# 3. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Train Logistic Regression Model
model = LogisticRegression()
model.fit(X_train, y_train)

# 5. Predictions
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:, 1]

# 6. Evaluation
accuracy = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred, output_dict=True)
auc = roc_auc_score(y_test, y_prob)

print("ðŸ”¹ Logistic Regression Results")
print(f"Accuracy: {accuracy:.4f}")
print(f"AUC Score: {auc:.4f}")
print(f"Confusion Matrix:\n{cm}")
print("Classification Report:")
for label, scores in report.items():
    if isinstance(scores, dict):
        print(f"{label}: Precision={scores['precision']:.2f}, Recall={scores['recall']:.2f}, F1={scores['f1-score']:.2f}")

# 7. ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
plt.plot(fpr, tpr, label='Logistic Regression (AUC = %.2f)' % auc)
plt.plot([0, 1], [0, 1], 'k--')  # Diagonal
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()
